{"version":3,"file":"index.js","sources":["pages/qna/index.vue","D:/softcaree/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvcW5hL2luZGV4LnZ1ZQ"],"sourcesContent":["<template>\n  <view class=\"qna-page\">\n    <!-- 顶部标题 -->\n    <view class=\"header\">\n      <text class=\"title\">甜蜜问答</text>\n      <text class=\"subtitle\">用问题和答案更了解彼此</text>\n    </view>\n\n    <!-- 问题卡片 -->\n    <view class=\"question-card\">\n      <text class=\"q-text\">{{ currentQuestion.text }}</text>\n    </view>\n\n    <!-- 我的回答输入 -->\n    <view class=\"answer-card\">\n      <text class=\"a-label\">我的回答</text>\n      <textarea class=\"a-input\" v-model=\"myAnswer\" placeholder=\"输入你的答案...\" />\n      <view class=\"actions\">\n        <button class=\"btn primary\" @click=\"submitAnswer\">提交答案</button>\n        <button class=\"btn secondary\" @click=\"nextQuestion\">下一题</button>\n      </view>\n    </view>\n\n    <!-- 对方答案显示（提交后出现） -->\n    <view v-if=\"partnerAnswer\" class=\"partner-card\">\n      <text class=\"p-label\">TA 的答案</text>\n      <text class=\"p-text\">{{ partnerAnswer }}</text>\n    </view>\n\n    <!-- 悬浮自定义问题按钮 -->\n    <view class=\"floating custom-floating\" @click=\"showCustomModal = true\">\n      <text class=\"float-icon\">✚</text>\n      <text class=\"float-text\">自定义问题</text>\n    </view>\n\n    <!-- 悬浮历史按钮 -->\n    <view class=\"floating\" @click=\"openHistory\">\n      <text class=\"float-icon\">🕘</text>\n      <text class=\"float-text\">历史回答</text>\n    </view>\n\n    <!-- 历史记录弹窗 -->\n    <view v-if=\"showHistory\" class=\"modal-mask\" @click=\"closeHistory\">\n      <view class=\"modal\" @click.stop>\n        <text class=\"modal-title\">历史回答记录</text>\n        <scroll-view class=\"history-list\" scroll-y=\"true\">\n          <view v-for=\"(item, i) in history\" :key=\"i\" class=\"history-item\">\n            <text class=\"h-q\">Q: {{ item.question }}</text>\n            <text class=\"h-me\">我: {{ item.myAnswer }}</text>\n            <text class=\"h-ta\">TA: {{ item.partnerAnswer }}</text>\n            <text class=\"h-time\">{{ item.time }}</text>\n          </view>\n        </scroll-view>\n        <view class=\"modal-actions\">\n          <button class=\"btn secondary\" @click=\"closeHistory\">关闭</button>\n          <button class=\"btn\" @click=\"clearHistory\">清空记录</button>\n        </view>\n      </view>\n    </view>\n\n    <!-- 自定义问题弹窗 -->\n    <view v-if=\"showCustomModal\" class=\"modal-mask\" @click=\"closeCustomModal\">\n      <view class=\"modal custom-modal\" @click.stop>\n        <text class=\"modal-title\">管理问题库</text>\n        \n        <!-- 添加新问题 -->\n        <view class=\"add-question\">\n          <textarea \n            class=\"q-input\" \n            v-model=\"newQuestion\" \n            placeholder=\"输入你想问的问题...\"\n            maxlength=\"100\"\n          />\n          <button class=\"btn primary small\" @click=\"addCustomQuestion\">添加问题</button>\n        </view>\n\n        <!-- 问题列表 -->\n        <scroll-view class=\"question-list\" scroll-y=\"true\">\n          <view class=\"section-title\">预设问题 ({{ defaultQuestions.length }})</view>\n          <view v-for=\"(q, i) in defaultQuestions\" :key=\"'default-'+i\" class=\"question-item\">\n            <text class=\"q-num\">{{ i + 1 }}.</text>\n            <text class=\"q-content\">{{ q.text }}</text>\n          </view>\n\n          <view class=\"section-title\" style=\"margin-top: 20rpx;\">自定义问题 ({{ customQuestions.length }})</view>\n          <view v-for=\"(q, i) in customQuestions\" :key=\"'custom-'+i\" class=\"question-item custom\">\n            <text class=\"q-num\">{{ defaultQuestions.length + i + 1 }}.</text>\n            <text class=\"q-content\">{{ q.text }}</text>\n            <text class=\"q-delete\" @click=\"deleteCustomQuestion(i)\">删除</text>\n          </view>\n          <view v-if=\"customQuestions.length === 0\" class=\"empty-hint\">\n            <text>暂无自定义问题</text>\n          </view>\n        </scroll-view>\n\n        <view class=\"modal-actions\">\n          <button class=\"btn secondary\" @click=\"closeCustomModal\">关闭</button>\n        </view>\n      </view>\n    </view>\n  </view>\n</template>\n\n<script>\nimport { \n  getQuestions, \n  submitAnswer, \n  getHistory, \n  addCustomQuestion, \n  deleteCustomQuestion \n} from '@/api/qna.js';\n\nexport default {\n  async onLoad(options) {\n    // 检查登录状态和token\n    const loginInfo = uni.getStorageSync('login_info');\n    if (!loginInfo || !loginInfo.token) {\n      uni.showModal({\n        title: '需要登录',\n        content: '甜蜜问答功能需要登录后才能使用，请先登录',\n        showCancel: false,\n        success: () => {\n          uni.reLaunch({\n            url: '/pages/login/index'\n          });\n        }\n      });\n      return;\n    }\n    \n    // 从后端加载问题列表和历史记录\n    await this.loadQuestionsFromServer();\n    await this.loadHistoryFromServer();\n    \n    // 加载完历史后，找到第一个未回答的问题\n    const qid = Number(options && options.qid);\n    if (qid) {\n      const idx = this.unansweredQuestions.findIndex(q => q.id === qid);\n      if (idx >= 0) this.qIndex = idx;\n    } else {\n      // 默认显示第一个未回答的问题\n      this.qIndex = 0;\n    }\n    // 如果携带 time，回显当天答案\n    const time = options && options.time ? decodeURIComponent(options.time) : '';\n    const rec = this.history.find(r => r.questionId === (qid || this.currentQuestion.id) && (!time || r.time === time));\n    if (rec) {\n      this.myAnswer = rec.myAnswer || '';\n      this.partnerAnswer = rec.partnerAnswer || '';\n    }\n  },\n  data() {\n    return {\n      defaultQuestions: [\n        { id: 1, text: '我们第一次约会的地点是哪里？', isDefault: true },\n        { id: 2, text: '你最喜欢我做的哪道菜？', isDefault: true },\n        { id: 3, text: '如果周末只做一件事，你希望是什么？', isDefault: true },\n        { id: 4, text: '你心中的完美旅行是什么样的？', isDefault: true },\n        { id: 5, text: '这一年里，你最感动的一刻是什么？', isDefault: true }\n      ],\n      customQuestions: [],\n      qIndex: 0,\n      myAnswer: '',\n      partnerAnswer: '',\n      showHistory: false,\n      showCustomModal: false,\n      newQuestion: '',\n      history: []\n    };\n  },\n  computed: {\n    questions() {\n      // 过滤掉无效的问题对象，确保每个问题都有 id 和 text\n      const validDefaultQuestions = (this.defaultQuestions || []).filter(q => q && q.id != null);\n      const validCustomQuestions = (this.customQuestions || []).filter(q => q && q.id != null);\n      return [...validDefaultQuestions, ...validCustomQuestions];\n    },\n    // 计算未回答的问题列表\n    unansweredQuestions() {\n      // 获取已回答的问题ID列表（确保类型一致）\n      const answeredIds = this.history\n        .map(h => {\n          // 兼容不同的字段名\n          const qid = h.questionId || h.question_id || h.id;\n          // 统一转换为数字类型进行比较\n          return qid != null ? Number(qid) : null;\n        })\n        .filter(id => id != null);\n      \n      // 过滤出未回答的问题（添加安全检查）\n      const unanswered = this.questions.filter(q => {\n        // 安全检查：确保 q 存在且有 id 属性\n        if (!q || q.id === undefined || q.id === null) {\n          console.warn('⚠️ 发现无效的问题对象:', q);\n          return false;\n        }\n        const questionId = Number(q.id);\n        // 检查转换后的ID是否有效\n        if (isNaN(questionId)) {\n          console.warn('⚠️ 问题ID无效:', q.id);\n          return false;\n        }\n        const isAnswered = answeredIds.includes(questionId);\n        return !isAnswered && q.isActive !== false; // 过滤掉已禁用的问题\n      });\n      \n      // 开发环境下输出调试信息\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 未回答问题计算:', {\n          totalQuestions: this.questions.length,\n          answeredIds: answeredIds,\n          unansweredCount: unanswered.length,\n          answeredCount: answeredIds.length,\n          historyCount: this.history.length,\n          questions: this.questions.map(q => ({ id: q.id, text: q.text })),\n          history: this.history.map(h => ({ \n            questionId: h.questionId || h.question_id,\n            question: h.question || h.questionText\n          }))\n        });\n      }\n      \n      return unanswered;\n    },\n    currentQuestion() {\n      // 从未回答的问题中获取当前问题\n      if (this.unansweredQuestions.length === 0) {\n        return { id: 0, text: '所有问题已回答完毕！🎉' };\n      }\n      return this.unansweredQuestions[this.qIndex] || this.unansweredQuestions[0];\n    }\n  },\n  mounted() {\n    // onLoad 中已经加载，无需重复加载\n  },\n  methods: {\n    // 保存历史记录到本地存储\n    saveHistory() {\n      try {\n        uni.setStorageSync('qna_history', this.history);\n      } catch (e) {\n        console.error('保存历史记录失败', e);\n      }\n    },\n    async submitAnswer() {\n      if (!this.myAnswer) {\n        uni.showToast({ title: '请填写你的答案', icon: 'none' });\n        return;\n      }\n      if (this.currentQuestion.id === 0) {\n        uni.showToast({ title: '所有问题已回答完毕', icon: 'none' });\n        return;\n      }\n      // 检查是否已经回答过这个问题\n      const alreadyAnswered = this.history.some(h => h.questionId === this.currentQuestion.id);\n      if (alreadyAnswered) {\n        uni.showToast({ title: '该问题已经回答过了', icon: 'none' });\n        return;\n      }\n      \n      try {\n        uni.showLoading({ title: '提交中...' });\n        \n        // 调用后端API提交答案\n        const res = await submitAnswer({\n          questionId: this.currentQuestion.id,\n          answer: this.myAnswer,\n          questionText: this.currentQuestion.text\n        });\n        \n        console.log('📥 提交答案响应:', res);\n        \n        if (res && res.success) {\n          // 兼容不同的响应格式\n          const responseData = res.data || res;\n          \n          // 如果对方已回答，显示对方答案（兼容 hasPartnerAnswer 和 hasPartnerAnswered 两种字段名）\n          if (responseData && (responseData.hasPartnerAnswered || responseData.hasPartnerAnswer)) {\n            this.partnerAnswer = responseData.partnerAnswer || '';\n          }\n          \n          // 添加到本地历史记录\n          const record = {\n            id: responseData?.answerId || res?.answerId || responseData?.id || Date.now(),\n            questionId: this.currentQuestion.id,\n            question: this.currentQuestion.text,\n            myAnswer: this.myAnswer,\n            partnerAnswer: responseData?.partnerAnswer || '',\n            time: new Date().toLocaleString(),\n            createdAt: new Date().toISOString()\n          };\n          this.history.unshift(record);\n          this.saveHistory();\n          \n          uni.showToast({ title: '提交成功', icon: 'success' });\n          \n          // 提交后自动跳到下一题\n          setTimeout(() => {\n            this.nextQuestion();\n          }, 1500);\n        } else {\n          // 即使响应格式不符合预期，也保存到本地\n          console.warn('⚠️ 响应格式不符合预期:', res);\n          const record = {\n            id: Date.now(),\n            questionId: this.currentQuestion.id,\n            question: this.currentQuestion.text,\n            myAnswer: this.myAnswer,\n            partnerAnswer: '',\n            time: new Date().toLocaleString(),\n            createdAt: new Date().toISOString()\n          };\n          this.history.unshift(record);\n          this.saveHistory();\n          uni.showToast({ title: '提交成功（已保存到本地）', icon: 'success' });\n          \n          setTimeout(() => {\n            this.nextQuestion();\n          }, 1500);\n        }\n      } catch (e) {\n        console.error('提交答案失败', e);\n        console.error('错误详情:', {\n          statusCode: e.statusCode,\n          message: e.message,\n          data: e.data,\n          url: e.url || '未知'\n        });\n        \n        // 401错误特殊处理\n        if (e.statusCode === 401) {\n          uni.hideLoading();\n          uni.showModal({\n            title: '登录已过期',\n            content: '您的登录已过期，请重新登录',\n            showCancel: false,\n            success: () => {\n              uni.reLaunch({\n                url: '/pages/login/index'\n              });\n            }\n          });\n          return;\n        }\n        \n        // 404错误：后端接口未实现\n        if (e.statusCode === 404) {\n          uni.hideLoading();\n          console.warn('⚠️ 后端接口未实现: POST /api/qna/answer/submit');\n          console.warn('💡 提示: 请联系后端开发人员实现该接口，或检查接口路径是否正确');\n          \n          // 临时方案：保存到本地，等后端接口就绪后再同步\n          uni.showModal({\n            title: '接口未实现',\n            content: '提交答案接口暂未实现，已保存到本地。请联系后端开发人员实现接口：POST /api/qna/answer/submit',\n            showCancel: false,\n            confirmText: '知道了',\n            success: () => {\n              // 本地保存答案记录（临时方案）\n              const record = {\n                id: Date.now(), // 临时ID\n                questionId: this.currentQuestion.id,\n                question: this.currentQuestion.text,\n                myAnswer: this.myAnswer,\n                partnerAnswer: '',\n                time: new Date().toLocaleString(),\n                createdAt: new Date().toISOString(),\n                _pendingSync: true // 标记为待同步\n              };\n              this.history.unshift(record);\n              this.saveHistory();\n              uni.showToast({ title: '已保存到本地', icon: 'none' });\n              \n              // 提交后自动跳到下一题\n              setTimeout(() => {\n                this.nextQuestion();\n              }, 1500);\n            }\n          });\n          return;\n        }\n        \n        uni.hideLoading();\n        uni.showToast({ \n          title: `提交失败: ${e.statusCode || '网络错误'}`, \n          icon: 'none',\n          duration: 3000\n        });\n      } finally {\n        // 确保loading关闭\n        uni.hideLoading();\n      }\n    },\n    nextQuestion() {\n      this.partnerAnswer = '';\n      this.myAnswer = '';\n      // 重新计算未回答问题列表，显示下一个\n      if (this.qIndex < this.unansweredQuestions.length - 1) {\n        this.qIndex += 1;\n      } else {\n        this.qIndex = 0; // 回到第一个未回答的\n      }\n      if (this.unansweredQuestions.length === 0) {\n        uni.showToast({ title: '所有问题已回答完毕！', icon: 'success' });\n      }\n    },\n    openHistory() {\n      \n      uni.navigateTo({ url: '/pages/qna/history' });\n    },\n    closeHistory() {\n      this.showHistory = false;\n    },\n    clearHistory() {\n      this.history = [];\n      this.saveHistory();\n      uni.showToast({ title: '记录已清空', icon: 'none' });\n    },\n    // 从后端加载历史记录\n    async loadHistoryFromServer() {\n      try {\n        const res = await getHistory({ page: 1, pageSize: 100 });\n        console.log('📥 历史记录响应:', res);\n        \n        let historyList = [];\n        \n        // 处理不同的响应格式（按优先级顺序）\n        if (res && res.success && Array.isArray(res.history)) {\n          // 格式: { success: true, history: [...], message: \"获取成功\", totalCount: 5 }\n          historyList = res.history;\n        } else if (res && res.success && Array.isArray(res.answers)) {\n          // 格式: { success: true, answers: [...], message: \"获取成功\", totalCount: 0 }\n          historyList = res.answers;\n        } else if (res && res.success && res.data && res.data.list) {\n          // 格式: { success: true, data: { list: [...] } }\n          historyList = Array.isArray(res.data.list) ? res.data.list : [];\n        } else if (res && res.success && res.data && Array.isArray(res.data)) {\n          // 格式: { success: true, data: [...] } （直接是数组）\n          historyList = res.data;\n        } else if (res && res.list) {\n          // 格式: { list: [...] } （直接返回数据）\n          historyList = Array.isArray(res.list) ? res.list : [];\n        } else if (Array.isArray(res)) {\n          // 格式: [...] （直接返回数组）\n          historyList = res;\n        } else {\n          console.warn('⚠️ 历史记录响应格式不符合预期:', res);\n          historyList = [];\n        }\n        \n        // 标准化历史记录格式，确保字段名一致\n        this.history = historyList.map(item => {\n          // 兼容多种字段名和格式\n          const id = item.id || item.answerId;\n          const questionId = item.questionId || item.question_id;\n          \n          // 优先使用后端返回的 question，如果没有则从问题列表中查找\n          let question = item.question || item.questionText || item.question_text;\n          if (!question && questionId != null) {\n            // 从问题列表中根据 questionId 查找对应的 question 文本\n            const allQuestions = [...(this.defaultQuestions || []), ...(this.customQuestions || [])];\n            const foundQuestion = allQuestions.find(q => q && q.id != null && Number(q.id) === Number(questionId));\n            if (foundQuestion && foundQuestion.text) {\n              question = foundQuestion.text;\n            }\n          }\n          \n          // 兼容 answer、myAnswer、my_answer 等多种字段名\n          const myAnswer = item.myAnswer || item.answer || item.my_answer;\n          const partnerAnswer = item.partnerAnswer || item.partner_answer || '';\n          // 兼容多种时间字段：answeredAt、createdAt、created_at、time、updatedAt\n          const time = item.time || item.answeredAt || item.createdAt || item.created_at || item.updatedAt || new Date().toLocaleString();\n          const createdAt = item.createdAt || item.created_at || item.answeredAt || item.updatedAt || new Date().toISOString();\n          \n          return {\n            id,\n            questionId,\n            question: question || `问题ID: ${questionId}`, // 如果仍然找不到，显示ID作为备用\n            myAnswer,\n            partnerAnswer,\n            time,\n            createdAt,\n            // 保留原始数据中的其他字段（如 questionCategory、answeredAt 等）\n            questionCategory: item.questionCategory || item.category,\n            answeredAt: item.answeredAt,\n            updatedAt: item.updatedAt,\n            ...item\n          };\n        });\n        \n        console.log('✅ 历史记录加载成功:', {\n          count: this.history.length,\n          totalCount: res?.totalCount,\n          sample: this.history.slice(0, 3)\n        });\n      } catch (e) {\n        console.error('加载历史记录失败', e);\n        console.error('错误详情:', {\n          message: e.message,\n          statusCode: e.statusCode,\n          data: e.data\n        });\n        \n        // 401错误特殊处理（但不弹出提示，因为已经在上面的加载问题中处理了）\n        if (e.statusCode === 401) {\n          return;\n        }\n        \n        // 如果后端请求失败，尝试从本地存储加载\n        try {\n          const data = uni.getStorageSync('qna_history');\n          this.history = Array.isArray(data) ? data : [];\n        } catch (e2) { \n          this.history = []; \n        }\n      }\n    },\n    // 从后端加载问题列表\n    async loadQuestionsFromServer() {\n      try {\n        uni.showLoading({ title: '加载中...' });\n        const res = await getQuestions();\n        console.log('📥 问题列表响应:', res);\n        \n        // 处理后端返回的格式: { success: true, questions: Array, message: \"获取成功\" }\n        if (res && res.success && Array.isArray(res.questions)) {\n          // 将问题按 category 分类，并转换字段名\n          const presetQuestions = [];\n          const customQuestions = [];\n          \n          res.questions.forEach(q => {\n            // 跳过无效的问题对象\n            if (!q || q.id === undefined || q.id === null) {\n              console.warn('⚠️ 跳过无效的问题对象:', q);\n              return;\n            }\n            \n            // 转换字段：questionText -> text，保留其他字段\n            const question = {\n              id: q.id,\n              text: q.questionText || q.text || '', // 兼容两种字段名，确保有默认值\n              category: q.category || 'preset',\n              isActive: q.isActive !== false, // 默认为 true\n              orderIndex: q.orderIndex ?? 999,\n              createdBy: q.createdBy,\n              // 保留其他可能存在的字段\n              ...q\n            };\n            \n            // 移除原始的 questionText，避免混乱\n            if (question.questionText) {\n              delete question.questionText;\n            }\n            \n            // 按 category 分类\n            if (q.category === 'preset') {\n              presetQuestions.push(question);\n            } else if (q.category === 'custom') {\n              customQuestions.push(question);\n            }\n          });\n          \n          // 预设问题按 orderIndex 排序\n          presetQuestions.sort((a, b) => {\n            const orderA = a.orderIndex ?? 999;\n            const orderB = b.orderIndex ?? 999;\n            return orderA - orderB;\n          });\n          \n          this.defaultQuestions = presetQuestions;\n          this.customQuestions = customQuestions;\n          \n          console.log('✅ 问题列表加载成功:', {\n            preset: presetQuestions.length,\n            custom: customQuestions.length,\n            total: presetQuestions.length + customQuestions.length\n          });\n        } else if (res && res.success && res.data) {\n          // 兼容旧格式: { success: true, data: { defaultQuestions: [...], customQuestions: [...] } }\n          this.defaultQuestions = Array.isArray(res.data.defaultQuestions) \n            ? res.data.defaultQuestions\n                .filter(q => q && q.id != null) // 过滤无效数据\n                .map(q => ({\n                  id: q.id,\n                  text: q.questionText || q.text || '',\n                  ...q\n                }))\n            : [];\n          this.customQuestions = Array.isArray(res.data.customQuestions) \n            ? res.data.customQuestions\n                .filter(q => q && q.id != null) // 过滤无效数据\n                .map(q => ({\n                  id: q.id,\n                  text: q.questionText || q.text || '',\n                  ...q\n                }))\n            : [];\n        } else {\n          console.warn('⚠️ 问题列表响应格式不符合预期:', res);\n          this.defaultQuestions = [];\n          this.customQuestions = [];\n        }\n      } catch (e) {\n        console.error('加载问题失败', e);\n        console.error('错误详情:', {\n          message: e.message,\n          statusCode: e.statusCode,\n          data: e.data\n        });\n        \n        // 401错误特殊处理\n        if (e.statusCode === 401) {\n          uni.hideLoading();\n          uni.showModal({\n            title: '登录已过期',\n            content: '您的登录已过期，请重新登录',\n            showCancel: false,\n            success: () => {\n              uni.reLaunch({\n                url: '/pages/login/index'\n              });\n            }\n          });\n          return;\n        }\n        \n        // 如果后端请求失败，使用预设问题和本地自定义问题\n        uni.showToast({ title: '加载问题失败，使用本地数据', icon: 'none' });\n        try {\n          const data = uni.getStorageSync('qna_custom_questions');\n          this.customQuestions = Array.isArray(data) ? data : [];\n        } catch (e2) { \n          this.customQuestions = []; \n        }\n      } finally {\n        uni.hideLoading();\n      }\n    },\n\n    // 添加自定义问题\n    async addCustomQuestion() {\n      if (!this.newQuestion || !this.newQuestion.trim()) {\n        uni.showToast({ title: '请输入问题内容', icon: 'none' });\n        return;\n      }\n      \n      try {\n        uni.showLoading({ title: '添加中...' });\n        \n        // 调用后端API添加问题\n        const res = await addCustomQuestion(this.newQuestion.trim());\n        \n        if (res.success) {\n          // 格式化新问题，确保包含所有必需字段\n          const newQuestionData = res.data || {};\n          const formattedQuestion = {\n            id: newQuestionData.id,\n            text: newQuestionData.text || newQuestionData.questionText || this.newQuestion.trim(),\n            category: 'custom',\n            isActive: true,\n            orderIndex: 999,\n            createdBy: newQuestionData.userId || newQuestionData.createdBy,\n            createdAt: newQuestionData.createdAt,\n            // 保留其他字段\n            ...newQuestionData\n          };\n          \n          // 将新问题添加到列表\n          this.customQuestions.push(formattedQuestion);\n          this.newQuestion = '';\n          \n          // 关闭弹窗，让用户看到主页面\n          this.showCustomModal = false;\n          \n          // 自动切换到新添加的问题（如果它是未回答的问题）\n          // 使用 setTimeout 确保响应式更新已完成（uni-app 中使用 setTimeout 更可靠）\n          setTimeout(() => {\n            const newQuestionIndex = this.unansweredQuestions.findIndex(\n              q => q.id === formattedQuestion.id\n            );\n            if (newQuestionIndex >= 0) {\n              // 找到新问题在未回答列表中的位置，切换过去\n              this.qIndex = newQuestionIndex;\n              // 清空当前的答案输入，准备回答新问题\n              this.myAnswer = '';\n              this.partnerAnswer = '';\n              \n              console.log('✅ 已切换到新添加的问题:', formattedQuestion);\n            }\n          }, 100);\n          \n          uni.showToast({ title: '问题添加成功', icon: 'success' });\n        }\n      } catch (e) {\n        console.error('添加问题失败', e);\n        \n        // 401错误特殊处理\n        if (e.statusCode === 401) {\n          uni.showModal({\n            title: '登录已过期',\n            content: '您的登录已过期，请重新登录',\n            showCancel: false,\n            success: () => {\n              uni.reLaunch({\n                url: '/pages/login/index'\n              });\n            }\n          });\n          return;\n        }\n        \n        uni.showToast({ title: '添加失败，请重试', icon: 'none' });\n      } finally {\n        uni.hideLoading();\n      }\n    },\n\n    async deleteCustomQuestion(index) {\n      const question = this.customQuestions[index];\n      \n      uni.showModal({\n        title: '确认删除',\n        content: '确定要删除这个问题吗？',\n        success: async (modalRes) => {\n          if (modalRes.confirm) {\n            try {\n              uni.showLoading({ title: '删除中...' });\n              \n              // 调用后端API删除问题\n              const res = await deleteCustomQuestion(question.id);\n              \n              if (res.success) {\n                // 从列表中移除\n                this.customQuestions.splice(index, 1);\n                uni.showToast({ title: '已删除', icon: 'success' });\n              }\n            } catch (e) {\n              console.error('删除问题失败', e);\n              \n              // 401错误特殊处理\n              if (e.statusCode === 401) {\n                uni.showModal({\n                  title: '登录已过期',\n                  content: '您的登录已过期，请重新登录',\n                  showCancel: false,\n                  success: () => {\n                    uni.reLaunch({\n                      url: '/pages/login/index'\n                    });\n                  }\n                });\n                return;\n              }\n              \n              uni.showToast({ title: '删除失败，请重试', icon: 'none' });\n            } finally {\n              uni.hideLoading();\n            }\n          }\n        }\n      });\n    },\n\n    closeCustomModal() {\n      this.showCustomModal = false;\n      this.newQuestion = '';\n    }\n  }\n};\n</script>\n\n<style>\n.qna-page { min-height: 100vh; background: #f7f7f9; padding-bottom: 60rpx; }\n.header { padding: 32rpx 24rpx 12rpx 24rpx; }\n.title { font-size: 36rpx; font-weight: 700; color: #2b2b2b; }\n.subtitle { margin-top: 6rpx; font-size: 24rpx; color: #7a7a7a; display: block; }\n.header-actions { margin-top: 16rpx; }\n.btn-custom { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: #ffffff; border-radius: 24rpx; padding: 14rpx 28rpx; font-size: 26rpx; border: none; }\n\n.question-card { margin: 24rpx; background: #ffffff; border-radius: 24rpx; padding: 24rpx; box-shadow: 0 8rpx 24rpx rgba(0,0,0,0.06); }\n.q-label { font-size: 24rpx; color: #9aa0a6; }\n.q-text { margin-top: 8rpx; font-size: 30rpx; color: #2b2b2b; font-weight: 600; }\n\n.answer-card { margin: 0 24rpx; background: #ffffff; border-radius: 24rpx; padding: 24rpx; box-shadow: 0 8rpx 24rpx rgba(0,0,0,0.06); }\n.a-label { font-size: 24rpx; color: #9aa0a6; }\n.a-input { margin-top: 12rpx; min-height: 100rpx; border: 1rpx solid #e6e6e6; border-radius: 16rpx; padding: 16rpx; font-size: 26rpx; }\n.actions { margin-top: 16rpx; display: flex; gap: 12rpx; }\n.btn { padding: 16rpx 26rpx; border-radius: 14rpx; font-size: 26rpx; }\n.btn.primary { background: linear-gradient(135deg, #ff8fb3 0%, #ff7aa0 100%); color: #ffffff; }\n.btn.secondary { background: #f0f0f0; color: #333; }\n\n.partner-card { margin: 16rpx 24rpx; background: #ffffff; border-radius: 24rpx; padding: 24rpx; box-shadow: 0 8rpx 24rpx rgba(0,0,0,0.06); }\n.p-label { font-size: 24rpx; color: #9aa0a6; }\n.p-text { margin-top: 8rpx; font-size: 28rpx; color: #2b2b2b; }\n\n.floating { position: fixed; right: 24rpx; bottom: 120rpx; background: linear-gradient(135deg, #ff8fb3 0%, #ff7aa0 100%); color: #ffffff; border-radius: 999rpx; padding: 16rpx 20rpx; display: flex; align-items: center; gap: 10rpx; box-shadow: 0 10rpx 24rpx rgba(255,143,179,0.4); z-index: 99; }\n.custom-floating { bottom: 200rpx; } /* 自定义问题按钮在历史按钮上面 */\n.float-icon { font-size: 26rpx; }\n.float-text { font-size: 24rpx; }\n\n.modal-mask { position: fixed; inset: 0; background: rgba(0,0,0,0.35); display: flex; align-items: center; justify-content: center; z-index: 100; }\n.modal { width: 88%; background: #ffffff; border-radius: 24rpx; padding: 24rpx; max-height: 80vh; display: flex; flex-direction: column; }\n.modal.custom-modal { width: 92%; }\n.modal-title { font-size: 30rpx; font-weight: 700; color: #2b2b2b; margin-bottom: 16rpx; }\n.history-list { max-height: 520rpx; margin-top: 12rpx; }\n.history-item { padding: 16rpx 0; border-bottom: 1rpx solid #f0f0f0; }\n.h-q { font-size: 26rpx; color: #333; }\n.h-me, .h-ta { font-size: 24rpx; color: #555; margin-top: 6rpx; }\n.h-time { font-size: 22rpx; color: #9aa0a6; margin-top: 6rpx; }\n.modal-actions { margin-top: 14rpx; display: flex; justify-content: flex-end; gap: 12rpx; }\n\n/* 自定义问题弹窗样式 */\n.add-question { display: flex; gap: 12rpx; align-items: flex-start; margin-bottom: 16rpx; }\n.q-input { flex: 1; min-height: 80rpx; border: 1rpx solid #e6e6e6; border-radius: 12rpx; padding: 12rpx; font-size: 26rpx; }\n.btn.small { padding: 12rpx 20rpx; font-size: 24rpx; white-space: nowrap; }\n\n.question-list { flex: 1; overflow-y: auto; }\n.section-title { font-size: 24rpx; color: #9aa0a6; margin-bottom: 12rpx; padding-left: 4rpx; }\n.question-item { display: flex; align-items: flex-start; padding: 14rpx 12rpx; background: #f7f7f9; border-radius: 12rpx; margin-bottom: 8rpx; }\n.question-item.custom { background: linear-gradient(135deg, #f5e6f0 0%, #fdf2f8 100%); } /* 改为淡粉紫色渐变 */\n.q-num { font-size: 24rpx; color: #ff8fb3; font-weight: 600; margin-right: 8rpx; flex-shrink: 0; }\n.q-content { flex: 1; font-size: 26rpx; color: #2b2b2b; word-break: break-all; }\n.q-delete { font-size: 24rpx; color: #ff6b6b; margin-left: 12rpx; flex-shrink: 0; padding: 4rpx 8rpx; }\n\n.empty-hint { padding: 32rpx; text-align: center; color: #9aa0a6; font-size: 24rpx; }\n</style>\n","import MiniProgramPage from 'C:/Users/Administrator/Desktop/项目/love_time_fu/pages/qna/index.vue'\nwx.createPage(MiniProgramPage)"],"names":["uni","submitAnswer","getHistory","getQuestions","addCustomQuestion","deleteCustomQuestion"],"mappings":"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"}