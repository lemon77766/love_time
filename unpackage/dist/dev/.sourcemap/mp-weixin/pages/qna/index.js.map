{"version":3,"file":"index.js","sources":["pages/qna/index.vue","D:/softcaree/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvcW5hL2luZGV4LnZ1ZQ"],"sourcesContent":["<template>\r\n  <view class=\"qna-page\">\r\n    <!-- 顶部标题 -->\r\n    <view class=\"header\">\r\n      <text class=\"title\">甜蜜问答</text>\r\n      <text class=\"subtitle\">用问题和答案更了解彼此</text>\r\n    </view>\r\n\r\n    <!-- 问题卡片 -->\r\n    <view class=\"question-card\">\r\n      <text class=\"q-text\">{{ currentQuestion.text }}</text>\r\n    </view>\r\n\r\n    <!-- 我的回答输入 -->\r\n    <view class=\"answer-card\">\r\n      <text class=\"a-label\">我的回答</text>\r\n      <textarea class=\"a-input\" v-model=\"myAnswer\" placeholder=\"输入你的答案...\" />\r\n      <view class=\"actions\">\r\n        <button class=\"btn primary\" @click=\"submitAnswer\">提交答案</button>\r\n        <button class=\"btn secondary\" @click=\"nextQuestion\">下一题</button>\r\n      </view>\r\n    </view>\r\n\r\n    <!-- 对方答案显示（提交后出现） -->\r\n    <view v-if=\"partnerAnswer\" class=\"partner-card\">\r\n      <text class=\"p-label\">TA 的答案</text>\r\n      <text class=\"p-text\">{{ partnerAnswer }}</text>\r\n    </view>\r\n\r\n    <!-- 悬浮自定义问题按钮 -->\r\n    <view class=\"floating custom-floating\" @click=\"showCustomModal = true\">\r\n      <text class=\"float-icon\">✚</text>\r\n      <text class=\"float-text\">自定义问题</text>\r\n    </view>\r\n\r\n    <!-- 悬浮历史按钮 -->\r\n    <view class=\"floating\" @click=\"openHistory\">\r\n      <text class=\"float-icon\">🕘</text>\r\n      <text class=\"float-text\">历史回答</text>\r\n    </view>\r\n\r\n    <!-- 历史记录弹窗 -->\r\n    <view v-if=\"showHistory\" class=\"modal-mask\" @click=\"closeHistory\">\r\n      <view class=\"modal\" @click.stop>\r\n        <text class=\"modal-title\">历史回答记录</text>\r\n        <scroll-view class=\"history-list\" scroll-y=\"true\">\r\n          <view v-for=\"(item, i) in history\" :key=\"i\" class=\"history-item\">\r\n            <text class=\"h-q\">Q: {{ item.question }}</text>\r\n            <text class=\"h-me\">我: {{ item.myAnswer }}</text>\r\n            <text class=\"h-ta\">TA: {{ item.partnerAnswer }}</text>\r\n            <text class=\"h-time\">{{ item.time }}</text>\r\n          </view>\r\n        </scroll-view>\r\n        <view class=\"modal-actions\">\r\n          <button class=\"btn secondary\" @click=\"closeHistory\">关闭</button>\r\n          <button class=\"btn\" @click=\"clearHistory\">清空记录</button>\r\n        </view>\r\n      </view>\r\n    </view>\r\n\r\n    <!-- 自定义问题弹窗 -->\r\n    <view v-if=\"showCustomModal\" class=\"modal-mask\" @click=\"closeCustomModal\">\r\n      <view class=\"modal custom-modal\" @click.stop>\r\n        <text class=\"modal-title\">管理问题库</text>\r\n        \r\n        <!-- 添加新问题 -->\r\n        <view class=\"add-question\">\r\n          <textarea \r\n            class=\"q-input\" \r\n            v-model=\"newQuestion\" \r\n            placeholder=\"输入你想问的问题...\"\r\n            maxlength=\"100\"\r\n          />\r\n          <button class=\"btn primary small\" @click=\"addCustomQuestion\">添加问题</button>\r\n        </view>\r\n\r\n        <!-- 问题列表 -->\r\n        <scroll-view class=\"question-list\" scroll-y=\"true\">\r\n          <view class=\"section-title\">预设问题 ({{ defaultQuestions.length }})</view>\r\n          <view v-for=\"(q, i) in defaultQuestions\" :key=\"'default-'+i\" class=\"question-item\">\r\n            <text class=\"q-num\">{{ i + 1 }}.</text>\r\n            <text class=\"q-content\">{{ q.text }}</text>\r\n          </view>\r\n\r\n          <view class=\"section-title\" style=\"margin-top: 20rpx;\">自定义问题 ({{ customQuestions.length }})</view>\r\n          <view v-for=\"(q, i) in customQuestions\" :key=\"'custom-'+i\" class=\"question-item custom\">\r\n            <text class=\"q-num\">{{ defaultQuestions.length + i + 1 }}.</text>\r\n            <text class=\"q-content\">{{ q.text }}</text>\r\n            <text class=\"q-delete\" @click=\"deleteCustomQuestion(i)\">删除</text>\r\n          </view>\r\n          <view v-if=\"customQuestions.length === 0\" class=\"empty-hint\">\r\n            <text>暂无自定义问题</text>\r\n          </view>\r\n        </scroll-view>\r\n\r\n        <view class=\"modal-actions\">\r\n          <button class=\"btn secondary\" @click=\"closeCustomModal\">关闭</button>\r\n        </view>\r\n      </view>\r\n    </view>\r\n  </view>\r\n</template>\r\n\r\n<script>\r\nimport { \r\n  getQuestions, \r\n  submitAnswer, \r\n  getHistory, \r\n  addCustomQuestion, \r\n  deleteCustomQuestion \r\n} from '@/api/qna.js';\r\n\r\nexport default {\r\n  async onLoad(options) {\r\n    // 从后端加载问题列表和历史记录\r\n    await this.loadQuestionsFromServer();\r\n    await this.loadHistoryFromServer();\r\n    \r\n    // 加载完历史后，找到第一个未回答的问题\r\n    const qid = Number(options && options.qid);\r\n    if (qid) {\r\n      const idx = this.unansweredQuestions.findIndex(q => q.id === qid);\r\n      if (idx >= 0) this.qIndex = idx;\r\n    } else {\r\n      // 默认显示第一个未回答的问题\r\n      this.qIndex = 0;\r\n    }\r\n    // 如果携带 time，回显当天答案\r\n    const time = options && options.time ? decodeURIComponent(options.time) : '';\r\n    const rec = this.history.find(r => r.questionId === (qid || this.currentQuestion.id) && (!time || r.time === time));\r\n    if (rec) {\r\n      this.myAnswer = rec.myAnswer || '';\r\n      this.partnerAnswer = rec.partnerAnswer || '';\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      defaultQuestions: [\r\n        { id: 1, text: '我们第一次约会的地点是哪里？', isDefault: true },\r\n        { id: 2, text: '你最喜欢我做的哪道菜？', isDefault: true },\r\n        { id: 3, text: '如果周末只做一件事，你希望是什么？', isDefault: true },\r\n        { id: 4, text: '你心中的完美旅行是什么样的？', isDefault: true },\r\n        { id: 5, text: '这一年里，你最感动的一刻是什么？', isDefault: true }\r\n      ],\r\n      customQuestions: [],\r\n      qIndex: 0,\r\n      myAnswer: '',\r\n      partnerAnswer: '',\r\n      showHistory: false,\r\n      showCustomModal: false,\r\n      newQuestion: '',\r\n      history: []\r\n    };\r\n  },\r\n  computed: {\r\n    questions() {\r\n      return [...this.defaultQuestions, ...this.customQuestions];\r\n    },\r\n    // 计算未回答的问题列表\r\n    unansweredQuestions() {\r\n      const answeredIds = this.history.map(h => h.questionId);\r\n      return this.questions.filter(q => !answeredIds.includes(q.id));\r\n    },\r\n    currentQuestion() {\r\n      // 从未回答的问题中获取当前问题\r\n      if (this.unansweredQuestions.length === 0) {\r\n        return { id: 0, text: '所有问题已回答完毕！🎉' };\r\n      }\r\n      return this.unansweredQuestions[this.qIndex] || this.unansweredQuestions[0];\r\n    }\r\n  },\r\n  mounted() {\r\n    // onLoad 中已经加载，无需重复加载\r\n  },\r\n  methods: {\r\n    async submitAnswer() {\r\n      if (!this.myAnswer) {\r\n        uni.showToast({ title: '请填写你的答案', icon: 'none' });\r\n        return;\r\n      }\r\n      if (this.currentQuestion.id === 0) {\r\n        uni.showToast({ title: '所有问题已回答完毕', icon: 'none' });\r\n        return;\r\n      }\r\n      // 检查是否已经回答过这个问题\r\n      const alreadyAnswered = this.history.some(h => h.questionId === this.currentQuestion.id);\r\n      if (alreadyAnswered) {\r\n        uni.showToast({ title: '该问题已经回答过了', icon: 'none' });\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        uni.showLoading({ title: '提交中...' });\r\n        \r\n        // 调用后端API提交答案\r\n        const res = await submitAnswer({\r\n          questionId: this.currentQuestion.id,\r\n          answer: this.myAnswer,\r\n          questionText: this.currentQuestion.text\r\n        });\r\n        \r\n        if (res.success) {\r\n          // 如果对方已回答，显示对方答案\r\n          if (res.data.hasPartnerAnswered) {\r\n            this.partnerAnswer = res.data.partnerAnswer;\r\n          }\r\n          \r\n          // 添加到本地历史记录\r\n          const record = {\r\n            id: res.data.answerId,\r\n            questionId: this.currentQuestion.id,\r\n            question: this.currentQuestion.text,\r\n            myAnswer: this.myAnswer,\r\n            partnerAnswer: res.data.partnerAnswer || '',\r\n            time: new Date().toLocaleString(),\r\n            createdAt: new Date().toISOString()\r\n          };\r\n          this.history.unshift(record);\r\n          \r\n          uni.showToast({ title: '提交成功', icon: 'success' });\r\n          \r\n          // 提交后自动跳到下一题\r\n          setTimeout(() => {\r\n            this.nextQuestion();\r\n          }, 1500);\r\n        }\r\n      } catch (e) {\r\n        console.error('提交答案失败', e);\r\n        uni.showToast({ title: '提交失败，请重试', icon: 'none' });\r\n      } finally {\r\n        uni.hideLoading();\r\n      }\r\n    },\r\n    nextQuestion() {\r\n      this.partnerAnswer = '';\r\n      this.myAnswer = '';\r\n      // 重新计算未回答问题列表，显示下一个\r\n      if (this.qIndex < this.unansweredQuestions.length - 1) {\r\n        this.qIndex += 1;\r\n      } else {\r\n        this.qIndex = 0; // 回到第一个未回答的\r\n      }\r\n      if (this.unansweredQuestions.length === 0) {\r\n        uni.showToast({ title: '所有问题已回答完毕！', icon: 'success' });\r\n      }\r\n    },\r\n    openHistory() {\r\n      uni.navigateTo({ url: '/pages/qna/history' });\r\n    },\r\n    closeHistory() {\r\n      this.showHistory = false;\r\n    },\r\n    clearHistory() {\r\n      this.history = [];\r\n      this.saveHistory();\r\n      uni.showToast({ title: '记录已清空', icon: 'none' });\r\n    },\r\n    // 从后端加载历史记录\r\n    async loadHistoryFromServer() {\r\n      try {\r\n        const res = await getHistory({ page: 1, pageSize: 100 });\r\n        if (res.success) {\r\n          this.history = res.data.list || [];\r\n        }\r\n      } catch (e) {\r\n        console.error('加载历史记录失败', e);\r\n        // 如果后端请求失败，尝试从本地存储加载\r\n        try {\r\n          const data = uni.getStorageSync('qna_history');\r\n          this.history = Array.isArray(data) ? data : [];\r\n        } catch (e2) { \r\n          this.history = []; \r\n        }\r\n      }\r\n    },\r\n    // 从后端加载问题列表\r\n    async loadQuestionsFromServer() {\r\n      try {\r\n        uni.showLoading({ title: '加载中...' });\r\n        const res = await getQuestions();\r\n        if (res.success) {\r\n          this.defaultQuestions = res.data.defaultQuestions || [];\r\n          this.customQuestions = res.data.customQuestions || [];\r\n        }\r\n      } catch (e) {\r\n        console.error('加载问题失败', e);\r\n        // 如果后端请求失败，使用预设问题和本地自定义问题\r\n        uni.showToast({ title: '加载问题失败，使用本地数据', icon: 'none' });\r\n        try {\r\n          const data = uni.getStorageSync('qna_custom_questions');\r\n          this.customQuestions = Array.isArray(data) ? data : [];\r\n        } catch (e2) { \r\n          this.customQuestions = []; \r\n        }\r\n      } finally {\r\n        uni.hideLoading();\r\n      }\r\n    },\r\n\r\n    // 添加自定义问题\r\n    async addCustomQuestion() {\r\n      if (!this.newQuestion || !this.newQuestion.trim()) {\r\n        uni.showToast({ title: '请输入问题内容', icon: 'none' });\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        uni.showLoading({ title: '添加中...' });\r\n        \r\n        // 调用后端API添加问题\r\n        const res = await addCustomQuestion(this.newQuestion.trim());\r\n        \r\n        if (res.success) {\r\n          // 将新问题添加到列表\r\n          this.customQuestions.push(res.data);\r\n          this.newQuestion = '';\r\n          uni.showToast({ title: '问题添加成功', icon: 'success' });\r\n        }\r\n      } catch (e) {\r\n        console.error('添加问题失败', e);\r\n        uni.showToast({ title: '添加失败，请重试', icon: 'none' });\r\n      } finally {\r\n        uni.hideLoading();\r\n      }\r\n    },\r\n\r\n    async deleteCustomQuestion(index) {\r\n      const question = this.customQuestions[index];\r\n      \r\n      uni.showModal({\r\n        title: '确认删除',\r\n        content: '确定要删除这个问题吗？',\r\n        success: async (modalRes) => {\r\n          if (modalRes.confirm) {\r\n            try {\r\n              uni.showLoading({ title: '删除中...' });\r\n              \r\n              // 调用后端API删除问题\r\n              const res = await deleteCustomQuestion(question.id);\r\n              \r\n              if (res.success) {\r\n                // 从列表中移除\r\n                this.customQuestions.splice(index, 1);\r\n                uni.showToast({ title: '已删除', icon: 'success' });\r\n              }\r\n            } catch (e) {\r\n              console.error('删除问题失败', e);\r\n              uni.showToast({ title: '删除失败，请重试', icon: 'none' });\r\n            } finally {\r\n              uni.hideLoading();\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n\r\n    closeCustomModal() {\r\n      this.showCustomModal = false;\r\n      this.newQuestion = '';\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.qna-page { min-height: 100vh; background: #f7f7f9; padding-bottom: 60rpx; }\r\n.header { padding: 32rpx 24rpx 12rpx 24rpx; }\r\n.title { font-size: 36rpx; font-weight: 700; color: #2b2b2b; }\r\n.subtitle { margin-top: 6rpx; font-size: 24rpx; color: #7a7a7a; display: block; }\r\n.header-actions { margin-top: 16rpx; }\r\n.btn-custom { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: #ffffff; border-radius: 24rpx; padding: 14rpx 28rpx; font-size: 26rpx; border: none; }\r\n\r\n.question-card { margin: 24rpx; background: #ffffff; border-radius: 24rpx; padding: 24rpx; box-shadow: 0 8rpx 24rpx rgba(0,0,0,0.06); }\r\n.q-label { font-size: 24rpx; color: #9aa0a6; }\r\n.q-text { margin-top: 8rpx; font-size: 30rpx; color: #2b2b2b; font-weight: 600; }\r\n\r\n.answer-card { margin: 0 24rpx; background: #ffffff; border-radius: 24rpx; padding: 24rpx; box-shadow: 0 8rpx 24rpx rgba(0,0,0,0.06); }\r\n.a-label { font-size: 24rpx; color: #9aa0a6; }\r\n.a-input { margin-top: 12rpx; min-height: 100rpx; border: 1rpx solid #e6e6e6; border-radius: 16rpx; padding: 16rpx; font-size: 26rpx; }\r\n.actions { margin-top: 16rpx; display: flex; gap: 12rpx; }\r\n.btn { padding: 16rpx 26rpx; border-radius: 14rpx; font-size: 26rpx; }\r\n.btn.primary { background: #2bad81; color: #ffffff; }\r\n.btn.secondary { background: #f0f0f0; color: #333; }\r\n\r\n.partner-card { margin: 16rpx 24rpx; background: #ffffff; border-radius: 24rpx; padding: 24rpx; box-shadow: 0 8rpx 24rpx rgba(0,0,0,0.06); }\r\n.p-label { font-size: 24rpx; color: #9aa0a6; }\r\n.p-text { margin-top: 8rpx; font-size: 28rpx; color: #2b2b2b; }\r\n\r\n.floating { position: fixed; right: 24rpx; bottom: 120rpx; background: #2bad81; color: #ffffff; border-radius: 999rpx; padding: 16rpx 20rpx; display: flex; align-items: center; gap: 10rpx; box-shadow: 0 10rpx 24rpx rgba(43,173,129,0.35); z-index: 99; }\r\n.custom-floating { bottom: 200rpx; } /* 自定义问题按钮在历史按钮上面 */\r\n.float-icon { font-size: 26rpx; }\r\n.float-text { font-size: 24rpx; }\r\n\r\n.modal-mask { position: fixed; inset: 0; background: rgba(0,0,0,0.35); display: flex; align-items: center; justify-content: center; z-index: 100; }\r\n.modal { width: 88%; background: #ffffff; border-radius: 24rpx; padding: 24rpx; max-height: 80vh; display: flex; flex-direction: column; }\r\n.modal.custom-modal { width: 92%; }\r\n.modal-title { font-size: 30rpx; font-weight: 700; color: #2b2b2b; margin-bottom: 16rpx; }\r\n.history-list { max-height: 520rpx; margin-top: 12rpx; }\r\n.history-item { padding: 16rpx 0; border-bottom: 1rpx solid #f0f0f0; }\r\n.h-q { font-size: 26rpx; color: #333; }\r\n.h-me, .h-ta { font-size: 24rpx; color: #555; margin-top: 6rpx; }\r\n.h-time { font-size: 22rpx; color: #9aa0a6; margin-top: 6rpx; }\r\n.modal-actions { margin-top: 14rpx; display: flex; justify-content: flex-end; gap: 12rpx; }\r\n\r\n/* 自定义问题弹窗样式 */\r\n.add-question { display: flex; gap: 12rpx; align-items: flex-start; margin-bottom: 16rpx; }\r\n.q-input { flex: 1; min-height: 80rpx; border: 1rpx solid #e6e6e6; border-radius: 12rpx; padding: 12rpx; font-size: 26rpx; }\r\n.btn.small { padding: 12rpx 20rpx; font-size: 24rpx; white-space: nowrap; }\r\n\r\n.question-list { flex: 1; overflow-y: auto; }\r\n.section-title { font-size: 24rpx; color: #9aa0a6; margin-bottom: 12rpx; padding-left: 4rpx; }\r\n.question-item { display: flex; align-items: flex-start; padding: 14rpx 12rpx; background: #f7f7f9; border-radius: 12rpx; margin-bottom: 8rpx; }\r\n.question-item.custom { background: linear-gradient(135deg, #e8f5f1 0%, #f0f9f6 100%); } /* 改为淡绿色渐变 */\r\n.q-num { font-size: 24rpx; color: #2bad81; font-weight: 600; margin-right: 8rpx; flex-shrink: 0; }\r\n.q-content { flex: 1; font-size: 26rpx; color: #2b2b2b; word-break: break-all; }\r\n.q-delete { font-size: 24rpx; color: #ff6b6b; margin-left: 12rpx; flex-shrink: 0; padding: 4rpx 8rpx; }\r\n\r\n.empty-hint { padding: 32rpx; text-align: center; color: #9aa0a6; font-size: 24rpx; }\r\n</style>\r\n","import MiniProgramPage from 'C:/Users/Administrator/Desktop/love_time/pages/qna/index.vue'\nwx.createPage(MiniProgramPage)"],"names":["uni","submitAnswer","getHistory","getQuestions","addCustomQuestion","deleteCustomQuestion"],"mappings":"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"}