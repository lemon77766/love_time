{"version":3,"file":"qna.js","sources":["api/qna.js"],"sourcesContent":["/**\n * 问答相关 API\n */\n\nimport http from '../utils/http.js';\nimport config from '../utils/config.js';\n\n/**\n * 获取问题列表\n * @returns {Promise<Object>} 返回问题列表\n * \n * 后端接口要求：\n * - 请求方法：GET\n * - 请求地址：/api/qna/questions\n * - 请求头：需携带 Authorization token\n * - 返回数据：\n *   {\n *     success: true,\n *     data: {\n *       defaultQuestions: [  // 预设问题列表\n *         { id: 1, text: \"问题内容\", isDefault: true }\n *       ],\n *       customQuestions: [   // 用户自定义问题列表\n *         { id: 101, text: \"自定义问题\", isDefault: false, userId: \"xxx\" }\n *       ]\n *     }\n *   }\n */\nexport function getQuestions() {\n  return http.get(config.API.QNA.LIST);\n}\n\n/**\n * 提交答案\n * @param {Object} answerData - 答案数据\n * @returns {Promise<Object>} 返回提交结果\n * \n * 后端接口要求：\n * - 请求方法：POST\n * - 请求地址：/api/qna/answer/submit\n * - 请求头：需携带 Authorization token\n * - 请求参数：\n *   {\n *     questionId: number,    // 问题ID（必填）\n *     answer: string,        // 我的答案（必填）\n *     questionText: string   // 问题文本（可选，用于记录）\n *   }\n * - 返回数据：\n *   {\n *     success: true,\n *     message: \"提交成功\",\n *     data: {\n *       answerId: number,           // 答案记录ID\n *       partnerAnswer: string,      // 对方的答案（如果对方已回答）\n *       hasPartnerAnswered: boolean // 对方是否已回答\n *     }\n *   }\n */\nexport function submitAnswer(answerData) {\n  return http.post(config.API.QNA.SUBMIT, {\n    questionId: answerData.questionId,\n    answer: answerData.answer,\n    questionText: answerData.questionText\n  });\n}\n\n/**\n * 获取历史回答记录\n * @param {Object} params - 查询参数\n * @returns {Promise<Object>} 返回历史记录\n * \n * 后端接口要求：\n * - 请求方法：GET\n * - 请求地址：/api/qna/history\n * - 请求头：需携带 Authorization token\n * - 请求参数：\n *   {\n *     page: number,      // 页码（可选，默认1）\n *     pageSize: number   // 每页数量（可选，默认20）\n *   }\n * - 返回数据：\n *   {\n *     success: true,\n *     data: {\n *       total: number,     // 总记录数\n *       list: [\n *         {\n *           id: number,\n *           questionId: number,\n *           question: string,\n *           myAnswer: string,\n *           partnerAnswer: string,\n *           createdAt: string,  // ISO时间格式\n *           updatedAt: string\n *         }\n *       ]\n *     }\n *   }\n */\nexport function getHistory(params = {}) {\n  return http.get(config.API.QNA.HISTORY, params);\n}\n\n/**\n * 获取对方答案\n * @param {number} questionId - 问题ID\n * @returns {Promise<Object>} 返回对方答案\n * \n * 后端接口要求：\n * - 请求方法：GET\n * - 请求地址：/api/qna/partner\n * - 请求头：需携带 Authorization token\n * - 请求参数：\n *   {\n *     questionId: number  // 问题ID（必填）\n *   }\n * - 返回数据：\n *   {\n *     success: true,\n *     data: {\n *       hasAnswered: boolean,    // 对方是否已回答\n *       answer: string,          // 对方的答案（如果已回答）\n *       answeredAt: string       // 回答时间（如果已回答）\n *     }\n *   }\n */\nexport function getPartnerAnswer(questionId) {\n  return http.get(config.API.QNA.PARTNER_ANSWER, { questionId });\n}\n\n/**\n * 添加自定义问题\n * @param {string} questionText - 问题文本\n * @returns {Promise<Object>} 返回添加结果\n * \n * 后端接口要求：\n * - 请求方法：POST\n * - 请求地址：/api/qna/question/add\n * - 请求头：需携带 Authorization token\n * - 请求参数：\n *   {\n *     text: string  // 问题文本（必填）\n *   }\n * - 返回数据：\n *   {\n *     success: true,\n *     message: \"添加成功\",\n *     data: {\n *       id: number,          // 新问题的ID\n *       text: string,        // 问题文本\n *       isDefault: false,\n *       userId: string,\n *       createdAt: string\n *     }\n *   }\n */\nexport function addCustomQuestion(questionText) {\n  return http.post(config.API.QNA.ADD_QUESTION, {\n    text: questionText\n  });\n}\n\n/**\n * 删除自定义问题\n * @param {number} questionId - 问题ID\n * @returns {Promise<Object>} 返回删除结果\n * \n * 后端接口要求：\n * - 请求方法：POST 或 DELETE\n * - 请求地址：/api/qna/question/delete\n * - 请求头：需携带 Authorization token\n * - 请求参数：\n *   {\n *     questionId: number  // 问题ID（必填）\n *   }\n * - 返回数据：\n *   {\n *     success: true,\n *     message: \"删除成功\"\n *   }\n */\nexport function deleteCustomQuestion(questionId) {\n  return http.post(config.API.QNA.DELETE_QUESTION, {\n    questionId\n  });\n}\n"],"names":["http","config"],"mappings":";;;AA4BO,SAAS,eAAe;AAC7B,SAAOA,WAAAA,KAAK,IAAIC,aAAAA,OAAO,IAAI,IAAI,IAAI;AACrC;AA4BO,SAAS,aAAa,YAAY;AACvC,SAAOD,WAAAA,KAAK,KAAKC,aAAAA,OAAO,IAAI,IAAI,QAAQ;AAAA,IACtC,YAAY,WAAW;AAAA,IACvB,QAAQ,WAAW;AAAA,IACnB,cAAc,WAAW;AAAA,EAC7B,CAAG;AACH;AAmCO,SAAS,WAAW,SAAS,IAAI;AACtC,SAAOD,WAAAA,KAAK,IAAIC,aAAM,OAAC,IAAI,IAAI,SAAS,MAAM;AAChD;AAuDO,SAAS,kBAAkB,cAAc;AAC9C,SAAOD,WAAAA,KAAK,KAAKC,aAAAA,OAAO,IAAI,IAAI,cAAc;AAAA,IAC5C,MAAM;AAAA,EACV,CAAG;AACH;AAqBO,SAAS,qBAAqB,YAAY;AAC/C,SAAOD,WAAAA,KAAK,KAAKC,aAAAA,OAAO,IAAI,IAAI,iBAAiB;AAAA,IAC/C;AAAA,EACJ,CAAG;AACH;;;;;;"}